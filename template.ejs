<!DOCTYPE html>
<html lang="zh">
<head>
    <meta charset="utf-8">
    <title>洛谷做题记录</title>
    <style type="text/css">

    * {
        margin: 0;
        padding: 0;
    }
    
    a {
        color: #0e90d2;
        text-decoration: none;
    }
    
    a:hover {
        color: #095f8a;
    }
    
    body {
        font-family: sans-serif;
        background: #f0f0f0;
        user-select: none;
        -moz-user-select: none;
        -webkit-user-select: none;
    }
    
    .r-header {
        position: fixed;
        left: 0;
        top: 0;
        width: 100%;
        height: 60px;
        background: linear-gradient(to bottom right, #d9e8ff, #f2f6fd);
        border-bottom: 1px solid #bbb;
        box-shadow: 0 0 8px #bbb;
        z-index: 11;
        cursor: pointer;
        transition: all linear .3s 0s;
    }
    
    .r-header:hover {
        border-color: #aaa;
        box-shadow: 0 0 12px #aaa;
    }
    
    .r-header h1 {
        padding: 16px 20px;
        font-size: 28px;
        line-height: 30px;
        color: #333;
    }
    
    .r-main {
        padding: 15px;
        margin-top: 60px;
        display: flex;
        flex-direction: row;
        z-index: 10;
    }
    
    .r-panel {
        background: #fafafa;
        border: 1px solid #bbb;
        border-radius: 5px;
        box-shadow: 0 0 8px #bbb;
        transition: all linear .3s 0s;
    }
    
    .r-panel:hover {
        background: #fcfcfc;
        border-color: #aaa;
        box-shadow: 0 0 12px #aaa;
    }
    
    .r-panel-left {
        font-weight: bold;
    }
    
    .r-panel-right {
        float: right;
    }
    
    .r-table-row {
        font-size: 14px;
        line-height: 25px;
    }
    
    .r-left {
        padding-right: 15px;
        flex-grow: 1;
        flex-shrink: 1;
    }
    
    .r-problem {
        margin-bottom: 15px;
        padding: 10px;
        height: 16px;
        line-height: 16px;
    }
    
    .r-problem.hidden {
        display: none;
    }
    
    .r-problem-name {
        font-size: 16px;
    }
    
    .r-problem-tag {
        display: inline-block;
        min-width: 3em;
        height: 16px;
        margin: 2px 4px;
        padding: 0 5px;
        font-size: 12px;
        font-weight: bold;
        line-height: 16px;
        text-align: center;
        border-radius: 2px;
        color: #fff;
    }
    
    .r-problem-tag-algorithm {
        background: #f495a0;
    }
    
    .r-right {
        width: 30%;
        max-width: 400px;
        min-width: 250px;
    }
    
    .r-right > .r-panel {
        position: relative;
        margin-bottom: 15px;
        padding: 50px 20px 15px 20px;
    }
    
    .r-right > .r-panel > .r-panel-title {
        position: absolute;
        top: 15px;
        left: 15px;
        font-size: 16px;
        font-weight: bold;
        color: #000;
    }
    
    a.selected {
        color: #333;
        cursor: default;
    }
    
    .r-difficulty-bar {
        width: 100%;
        height: 10px;
        margin-top: 10px;
        overflow: hidden;
        border-radius: 5px;
        box-shadow: 0 0 8px #bbb;
        transition: all linear .3s 0s;
    }
    
    .r-difficulty-bar:hover {
        box-shadow: 0 0 12px #aaa;
    }
    
    .r-difficulty-bar-range {
        display: block;
        float: left;
        height: 10px;
        opacity: 0.4;
        cursor: pointer;
        transition: opacity linear .3s 0s;
    }
    
    .r-difficulty-bar-range.hover {
        opacity: 0.7;
    }
    
    .r-difficulty-bar-range.selected {
        opacity: 1;
    }
    
    .r-difficulty-list {
        margin-top: 20px;
    }
    
    .r-difficulty-item {
        margin-top: 10px;
        padding: 10px;
        height: 14px;
        font-size: 14px;
        line-height: 14px;
        border-radius: 5px;
        border: 1px solid #bbb;
        box-shadow: 0 0 4px #bbb;
        cursor: pointer;
        transition: all linear .3s 0s;
    }
    
    .r-difficulty-item.hover {
        border: 1px solid #aaa;
        box-shadow: 0 0 12px #aaa;
        background: #f3f3f3;
    }
    
    .r-difficulty-item.selected {
        border: 1px solid #999;
        box-shadow: 0 0 12px #999;
        background: #e3e3e3;
    }
    
    .r-difficulty-item-icon {
        display: block;
        float: left;
        width: 12px;
        height: 12px;
        border: 1px solid #aaa;
        margin-right: 4px;
    }
    
    .r-algorithm-list {
        max-height: 400px;
        overflow-y: auto;
    }
    
    .r-algorithm-item {
        margin-bottom: 5px;
        padding: 6px 8px;
        height: 14px;
        border-radius: 4px;
        border: 1px solid #ccc;
        font-size: 14px;
        line-height: 14px;
        cursor: pointer;
        transition: all linear .3s 0s;
    }
    
    .r-algorithm-item:hover {
        background: #f7f7f7;
        border: 1px solid #999;
    }
    
    .r-algorithm-item.selected {
        background: #e3e3e3;
    }
    
    .r-algorithm-bar {
        position: relative;
        display: block;
        width: 100px;
        height: 14px;
        background: #ddd;
    }
    
    .r-algorithm-bar-fill {
        position: absolute;
        display: block;
        top: 0;
        left: 0;
        height: 100%;
        background: #a7c6ff;
        z-index: 1;
    }
    
    .r-algorithm-bar-text {
        position: absolute;
        display: block;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        text-align: center;
        font-size: 12px;
        color: #333;
        z-index: 2;
    }
    
    </style>
    <script src="https://libs.baidu.com/jquery/2.0.0/jquery.min.js" type="text/javascript"></script>
</head>
<body>
    <div class="r-header">
        <h1></h1>
    </div>
    <div class="r-main">
        <div class="r-left">
            <div class="r-problems"></div>
        </div>
        <div class="r-right">
            <div class="r-panel r-summary">
                <div class="r-panel-title">总览</div>
                <div class="r-table-row">
                    <span class="r-panel-left">用户</span>
                    <span class="r-panel-right" id="r-summary-user"></span>
                </div>
                <div class="r-table-row">
                    <span class="r-panel-left">提交总数</span>
                    <span class="r-panel-right" id="r-summary-submit"></span>
                </div>
                <div class="r-table-row">
                    <span class="r-panel-left">通过总数</span>
                    <span class="r-panel-right" id="r-summary-solved"></span>
                </div>
                <div class="r-table-row">
                    <span class="r-panel-left">未知题目</span>
                    <span class="r-panel-right" id="r-summary-unknown"></span>
                </div>
                <div class="r-table-row">
                    <span class="r-panel-left">统计时间</span>
                    <span class="r-panel-right" id="r-summary-time"></span>
                </div>
                <div class="r-table-row">
                    <span class="r-panel-left">题目总数</span>
                    <span class="r-panel-right" id="r-filtered-count"></span>
                </div>
            </div>
            <div class="r-panel r-operations">
                <div class="r-panel-title">操作</div>
                <div class="r-table-row">
                    <span class="r-panel-left">题目页码</span>
                    <span class="r-panel-right">
                        <a href="javascript:void(0);" class="r-page-a" data-page="first" title="第一页">&lt;&lt;</a>
                        <a href="javascript:void(0);" class="r-page-a" data-page="prev" title="上一页">&lt;</a>
                        <span class="r-page-num">---</span>
                        <a href="javascript:void(0);" class="r-page-a" data-page="next" title="下一页">&gt;</a>
                        <a href="javascript:void(0);" class="r-page-a" data-page="last" title="最后一页">&gt;&gt;</a>
                    </span>
                </div>
                <div class="r-table-row">
                    <span class="r-panel-left">排序方式</span>
                    <span class="r-panel-right">
                        <a href="javascript:void(0);" class="r-sort-by" data-sort-by="pid">题号</a>
                        <a href="javascript:void(0);" class="r-sort-by" data-sort-by="diff">难度</a>
                        <span>|</span>
                        <a href="javascript:void(0);" class="r-sort-order" data-order="asc">升序</a>
                        <a href="javascript:void(0);" class="r-sort-order" data-order="des">降序</a>
                    </span>
                </div>
                <div class="r-table-row">
                    <span class="r-panel-left">导出统计数据</span>
                    <span class="r-panel-right">
                        <a href="javascript:void(0);" id="r-export-json" title="原始数据(json)">原始数据</a>
                        <a href="javascript:void(0);" id="r-export-txt" title="文本(txt)">文本</a>
                    </span>
                </div>
            </div>
            <div class="r-panel r-difficulty">
                <div class="r-panel-title">难度</div>
                <div class="r-difficulty-bar"></div>
                <div class="r-difficulty-list"></div>
            </div>
            <div class="r-panel r-algorithm">
                <div class="r-panel-title">算法标签</div>
                <div class="r-algorithm-list"></div>
            </div>
        </div>
    </div>

    <script type="text/javascript">

    'use strict';
    
    function randomColor() {
        let res = '#';
        for (let i = 0; i < 6; ++i) res += Math.floor(Math.random() * 16).toString(16);
        return res;
    }
    
    function downloadFile(content, filename, mimeType) {
        let blob = new Blob([ content ], { type: mimeType });
        let url = URL.createObjectURL(blob);
        let $a = $('<a>');
        $a.attr('href', url);
        $a.attr('download', filename);
        $('body').append($a);
        $a.get(0).click();
        $a.remove();
        URL.revokeObjectURL(url);
    }
    
    class DataMapError extends Error {
        constructor(...arg) {
            super(...arg);
        }
    }
    
    class DataMap {
    
        constructor(arr) {
            this.head = arr[0];
            this.body = arr.slice(1);
        }
    
        getCID(col) {
            let cid = this.head.indexOf(col);
            if (cid === -1) throw new DataMapError(`Column "${col}" not found`);
            return cid;
        }
    
        getRID(col, value) {
            let cid = this.getCID(col);
            return this.body.findIndex((row) => {
                return row[cid] === value;
            });
        }
    
        lookupRow(col, value) {
            let rid = this.getRID(col, value);
            if (rid === -1) return null;
            return this.body[rid];
        }
    
        lookup(col, value, col2) {
            let row = this.lookupRow(col, value);
            let cid2 = this.getCID(col2);
            if (!row) return null;
            return row[cid2];
        }
    
        lookupByRID(rid, col) {
            return this.body[rid][this.getCID(col)];
        }
        
        appendRow(row) {
            if (row instanceof Array) {
                return this.body.push(row) - 1;
            } else {
                return this.body.push(this.head.map(function(title) {
                    return row[title];
                })) - 1;
            }
        }
    
        sort(cols) {
            let self = this;
            this.body.sort(function(a, b) {
                for (let i = 0; i < cols.length; ++i) {
                    let cid = self.getCID(cols[i].name);
                    let t = cols[i].fn(a[cid], b[cid]);
                    if (t) return t;
                }
                return 0;
            });
        }
    
        rowData(row) {
            let res = {};
            this.head.forEach(function(col, i) {
                res[col] = row[i];
            });
            return res;
        }
    
        rowDataByRID(rid) {
            return this.rowData(this.body[rid]);
        }
    
        forEach(fn, thisObj) {
            let self = this;
            this.body.forEach(function(row, i) {
                fn.call(thisObj, self.rowData(row), i);
            });
        }
    
        get cols() {
            return this.head;
        }
    
        get rows() {
            return this.body;
        }
    
        get numCols() {
            return this.head.length;
        }
    
        get numRows() {
            return this.body.length;
        }
    
        get length() {
            return this.numRows;
        }
    }
    
    let dataManager = {
        crawlResult: null,
        difficultyTags: new DataMap([
            [ "id", "name", "color" ],
            [ 0, "入门难度", "#e74c3c" ],
            [ 1, "普及-", "#e67e22" ],
            [ 2, "普及/提高-", "#f1c40f" ],
            [ 3, "普及+/提高", "#5eb95e" ],
            [ 4, "提高+/省选-", "#3498db" ],
            [ 5, "省选/NOI-", "#8e44ad" ],
            [ 6, "NOI/NOI+/CTSC", "#2e468c" ],
            [ 7, "尚无评定", "#bbb" ]
        ]),
        algorithmTags: new DataMap([[ "id", "name" ]]),
        difficultyCount: {},
        algorithmCount: {},
        solved: [],
        init(crawlResult) {
            let self = this;
            this.crawlResult = crawlResult;
            this.difficultyCount = {};
            this.algorithmCount = {};
            this.solved = [];
            crawlResult.solved.forEach(function(prob) {
                let diff_id = self.difficultyTags.lookup("name", prob.difficulty, "id");
                if (diff_id === null) {
                    diff_id = self.difficultyTags.numRows;
                    self.difficultyTags.appendRow({
                        id: diff_id,
                        name: prob.difficulty,
                        color: randomColor()
                    });
                }
                if (!self.difficultyCount[diff_id]) {
                    self.difficultyCount[diff_id] = 0;
                }
                ++self.difficultyCount[diff_id];
                let algo_ids = prob.algorithms.map(function(algo) {
                    let p = self.algorithmTags.lookup("name", algo, "id");
                    if (p === null) {
                        p = self.algorithmTags.numRows;
                        self.algorithmTags.appendRow({
                            id: p,
                            name: algo
                        });
                    }
                    if (!self.algorithmCount[p]) {
                        self.algorithmCount[p] = 0;
                    }
                    ++self.algorithmCount[p];
                    return p;
                });
                self.solved.push({
                    pid: prob.pid,
                    name: prob.name,
                    diff_id: diff_id,
                    algo_ids: algo_ids.join(",")
                });
            });
        }
    };
    
    let UI = {
        filter: {
            diff: [],
            algo: []
        },
        listeners: {},
        on(id, fn) {
            if (!this.listeners[id]) this.listeners[id] = [];
            this.listeners[id].push(fn);
            return this;
        },
        emit(id, ...arg) {
            if (this.listeners[id]) {
                let self = this;
                this.listeners[id].forEach(function(fn) {
                    fn.apply(self, arg);
                });
            }
            return this;
        },
        init() {
            this.load();
        },
        selfInit() {
            this.addSelfListeners();
            this.addListeners();
        },
        addSelfListeners() {
            this.on('difficulty.mouseOver', function(diff_id) {
                if (diff_id !== -1) {
                    difficultyPanel.$ranges[diff_id].addClass('hover');
                }
                difficultyPanel.$items[diff_id].addClass('hover');
            }).on('difficulty.mouseOut', function(diff_id) {
                if (diff_id !== -1) {
                    difficultyPanel.$ranges[diff_id].removeClass('hover');
                }
                difficultyPanel.$items[diff_id].removeClass('hover');
            }).on('difficulty.click', function(diff_id) {
                if (diff_id === -1) {
                    this.filter.diff.forEach(function(diff_id) {
                        difficultyPanel.$ranges[diff_id].removeClass('selected');
                        difficultyPanel.$items[diff_id].removeClass('selected');
                    });
                    this.filter.diff = [];
                } else {
                    let p = this.filter.diff.indexOf(diff_id);
                    if (p === -1) {
                        this.filter.diff.push(diff_id);
                        difficultyPanel.$ranges[diff_id].addClass('selected');
                        difficultyPanel.$items[diff_id].addClass('selected');
                    } else {
                        this.filter.diff.splice(p, 1);
                        difficultyPanel.$ranges[diff_id].removeClass('selected');
                        difficultyPanel.$items[diff_id].removeClass('selected');
                    }
                }
                this.updateProblems();
            }).on('algorithm.click', function(algo_id) {
                if (algo_id === -1) {
                    this.filter.algo.forEach(function(algo_id) {
                        algorithmPanel.$items[algo_id].removeClass('selected');
                    });
                    this.filter.algo = [];
                } else {
                    let p = this.filter.algo.indexOf(algo_id);
                    if (p === -1) {
                        this.filter.algo.push(algo_id);
                        algorithmPanel.$items[algo_id].addClass('selected');
                    } else {
                        this.filter.algo.splice(p, 1);
                        algorithmPanel.$items[algo_id].removeClass('selected');
                    }
                }
                this.updateProblems();
            });
        },
        load() {
            let userDesc = 'U' + dataManager.crawlResult.uid + ' ' + dataManager.crawlResult.username;
            let spaceURL = 'https://www.luogu.org/space/show?uid=' + dataManager.crawlResult.uid;
            let submitURL = 'https://www.luogu.org/recordnew/lists?uid=' + dataManager.crawlResult.uid;
            let solvedURL = submitURL + '&status=12';
            this.userDesc = userDesc;
            document.title = '洛谷做题记录 - ' + userDesc;
            $('.r-header h1').text(userDesc);
            $('#r-summary-user').html('')
                .append($('<a target="_blank">')
                    .prop('href', spaceURL)
                    .text(userDesc));
            $('#r-summary-submit').html('')
                .append($('<a target="_blank">')
                    .prop('href', submitURL)
                    .text(dataManager.crawlResult.submitTotal));
            $('#r-summary-solved').html('')
                .append($('<a target="_blank">')
                    .prop('href', solvedURL)
                    .text(dataManager.crawlResult.solvedTotal));
            $('#r-summary-unknown').text(dataManager.crawlResult.solvedUnknown.length)
                .prop('title', dataManager.crawlResult.solvedUnknown.join('\n'));
            let date = new Date();
            date.setTime(dataManager.crawlResult.time);
            $('#r-summary-time').text(date.toLocaleString());
    
            this.filter.diff = [];
            this.filter.algo = [];
            this.updateProblems();
            difficultyPanel.draw();
            algorithmPanel.draw();
        },
        checkDiff(diff_id) {
            return !this.filter.diff.length || this.filter.diff.indexOf(diff_id) !== -1;
        },
        checkAlgo(algo_ids) {
            if (!this.filter.algo.length) return true;
            for (let i = 0; i < this.filter.algo.length; ++i) {
                if (algo_ids.indexOf(this.filter.algo[i].toString()) !== -1) return true;
            }
            return false;
        },
        updateProblems() {
            let self = this;
            problemPanel.updateProblems(dataManager.solved.filter((prob) => {
                return self.checkDiff(prob.diff_id) && self.checkAlgo(prob.algo_ids.split(','));
            }));
        },
        addListeners() {
            $('.r-page-a').click(function(e) {
                problemPanel.setPage($(this).attr('data-page'));
            });
            $('.r-sort-by').click(function(e) {
                problemPanel.setSortWays($(this).attr('data-sort-by'), null);
            });
            $('.r-sort-order').click(function(e) {
                problemPanel.setSortWays(null, $(this).attr('data-order'));
            });
            $('#r-export-json').click(function(e) {
                if (!dataManager.crawlResult) return;
                downloadFile(JSON.stringify(dataManager.crawlResult), UI.userDesc + '.json', 'application/json');
            });
            $('#r-export-txt').click(function(e) {
                if (!dataManager.crawlResult) return;
                downloadFile(resultTextMaker.make(dataManager.crawlResult), UI.userDesc + '.txt', 'text/plain');
            });
            $('.r-difficulty-bar').on('mouseover', '.r-difficulty-bar-range', function(e) {
                UI.emit('difficulty.mouseOver', parseInt($(this).attr('data-id')));
            }).on('mouseout', '.r-difficulty-bar-range', function(e) {
                UI.emit('difficulty.mouseOut', parseInt($(this).attr('data-id')));
            }).on('click', '.r-difficulty-bar-range', function(e) {
                UI.emit('difficulty.click', parseInt($(this).attr('data-id')));
            });
            $('.r-difficulty-list').on('mouseover', '.r-difficulty-item', function(e) {
                UI.emit('difficulty.mouseOver', parseInt($(this).attr('data-id')));
            }).on('mouseout', '.r-difficulty-item', function(e) {
                UI.emit('difficulty.mouseOut', parseInt($(this).attr('data-id')));
            }).on('click', '.r-difficulty-item', function(e) {
                UI.emit('difficulty.click', parseInt($(this).attr('data-id')));
            });
            $('.r-algorithm-list').on('click', '.r-algorithm-item', function(e) {
                UI.emit('algorithm.click', parseInt($(this).attr('data-id')));
            });
        }
    };
    
    let problemPanel = {
        $list: $('.r-problems'),
        $items: {},
        problems: [],
        currentPage: 0,
        totalPages: 0,
        problemsPerPage: 25,
        sortWays: {
            keyword: 'pid',
            order: 'asc'
        },
        sortFn: {
            'pid': function(a, b) {
                if (a.pid.startsWith('P') && !b.pid.startsWith('P')) return -1;
                if (b.pid.startsWith('P') && !a.pid.startsWith('P')) return 1;
                if (a.pid > b.pid) return 1;
                if (a.pid < b.pid) return -1;
                return 0;
            },
            'diff': function(a, b) {
                if (a.diff_id > b.diff_id) return 1;
                if (a.diff_id < b.diff_id) return -1;
                return problemPanel.sortFn['pid'](a, b);
            }
        },
        setPage(page) {
            if (!this.totalPages) return;
            if (typeof page === 'string') {
                switch (page) {
                    case 'first': page = 1; break;
                    case 'last': page = this.totalPages; break;
                    case 'prev': page = this.currentPage - 1; break;
                    case 'next': page = this.currentPage + 1; break;
                    default: return;
                }
            }
            if (page < 1) page = 1;
            if (page > this.totalPages) page = this.totalPages;
            if (page === this.currentPage) return;
            this.currentPage = page;
            this.updateInfo();
            this.draw();
        },
        setSortWays(keyword, order) {
            if (keyword) this.sortWays.keyword = keyword;
            if (order) this.sortWays.order = order;
            this.sort();
            this.updateInfo();
            this.draw();
        },
        sort() {
            let fn = this.sortFn[this.sortWays.keyword];
            let rev = this.sortWays.order === 'des';
            this.problems.sort(function(a, b) {
                let t = fn(a, b);
                return rev ? -t : t;
            });
        },
        updateProblems(problems) {
            this.problems = problems.slice(0);
            if (!this.problems.length) {
                this.currentPage = 0;
                this.totalPages = 0;
            } else {
                this.currentPage = 1;
                this.totalPages = Math.ceil(this.problems.length / this.problemsPerPage);
            }
            this.sort();
            this.updateInfo();
            this.draw();
        },
        draw() {
            let self = this;
            this.$list.html('');
            this.$items = {};
            let diffTags = dataManager.difficultyTags;
            let algoTags = dataManager.algorithmTags;
            this.problems
            .slice((this.currentPage - 1) * this.problemsPerPage, this.currentPage * this.problemsPerPage)
            .forEach(function(prob) {
                let $item = $('<div class="r-panel r-problem">');
                $item.append($('<span class="r-problem-name">')
                    .append($('<a target="_blank">')
                        .prop('href', 'https://www.luogu.org/problemnew/show/' + prob.pid)
                        .text(prob.pid + ' ' + prob.name)));
                let $tags = $('<span class="r-panel-right">');
                let diffRow = diffTags.rowData(diffTags.lookupRow('id', prob.diff_id));
                $tags.append($('<span class="r-problem-tag r-problem-tag-difficulty">')
                    .attr('data-id', prob.diff_id)
                    .text(diffRow.name)
                    .css('backgroundColor', diffRow.color));
                prob.algo_ids.split(',').forEach(function(algo_id) {
                    if (!algo_id) return;
                    $tags.append($('<span class="r-problem-tag r-problem-tag-algorithm">')
                        .attr('data-id', algo_id)
                        .text(algoTags.lookup('id', parseInt(algo_id), 'name')));
                });
                self.$list.append($item.append($tags));
                self.$items[prob.pid] = $item;
            });
        },
        updateInfo() {
            let self = this;
            $('#r-filtered-count').text(this.problems.length);
            $('.r-page-num').text(this.totalPages ? '第' + this.currentPage + '/' + this.totalPages + '页' : '---');
            $('.r-sort-by').each(function(i, a) {
                let $a = $(a);
                if ($a.attr('data-sort-by') === self.sortWays.keyword) {
                    $a.addClass('selected');
                } else {
                    $a.removeClass('selected');
                }
            });
            $('.r-sort-order').each(function(i, a) {
                let $a = $(a);
                if ($a.attr('data-order') === self.sortWays.order) {
                    $a.addClass('selected');
                } else {
                    $a.removeClass('selected');
                }
            });
        }
    };
    
    let difficultyPanel = {
        $bar: $('.r-difficulty-bar'),
        $list: $('.r-difficulty-list'),
        $ranges: {},
        $items: {},
        draw() {
            let self = this;
            let ranges = [];
            let total = dataManager.solved.length;
            this.$bar.html('');
            this.$list.html('');
            this.$ranges = {};
            this.$items = {};
            dataManager.difficultyTags.forEach(function(row) {
                let cnt = dataManager.difficultyCount[row.id];
                if (!cnt) return;
                ranges.push({
                    id: row.id,
                    name: row.name,
                    count: cnt,
                    color: row.color
                });
            });
            ranges.push({
                id: -1,
                name: '总计',
                count: total,
                color: 'transparent'
            });
            ranges.forEach(function(range) {
                let percent = range.count / total * 100;
                if (range.id !== -1) {
                    let $range = $('<span class="r-difficulty-bar-range">');
                    $range.attr('data-id', range.id)
                        .css('width', percent + '%')
                        .css('backgroundColor', range.color);
                    self.$bar.append($range);
                    self.$ranges[range.id] = $range;
                }
                let $item = $('<div class="r-difficulty-item">');
                $item.attr('data-id', range.id)
                    .append($('<span class="r-difficulty-item-icon">')
                        .css('backgroundColor', range.color))
                    .append($('<span class="r-panel-left">')
                        .text(range.name))
                    .append($('<span class="r-panel-right">')
                        .text(range.count));
                self.$list.append($item);
                self.$items[range.id] = $item;
            });
        }
    };
    
    let algorithmPanel = {
        $list: $('.r-algorithm-list'),
        $items: {},
        draw() {
            let self = this;
            let list = [];
            this.$list.html('');
            this.$items = {};
            let total = dataManager.solved.length;
            dataManager.algorithmTags.forEach(function(row) {
                if (!dataManager.algorithmCount[row.id]) return;
                list.push({
                    id: row.id,
                    name: row.name,
                    count: dataManager.algorithmCount[row.id]
                });
            });
            list.push({
                id: -1,
                name: '总计',
                count: total
            });
            list.sort(function(a, b) {
                return b.count - a.count;
            });
            list.forEach(function(item) {
                let percent = item.count / total * 100;
                let $item = $('<div class="r-algorithm-item">');
                $item.attr('data-id', item.id)
                    .append($('<span class="r-panel-left">').text(item.name))
                    .append($('<span class="r-panel-right r-algorithm-bar">')
                        .append($('<span class="r-algorithm-bar-fill">')
                            .css('width', percent + '%'))
                        .append($('<span class="r-algorithm-bar-text">').text(item.count)));
                self.$list.append($item);
                self.$items[item.id] = $item;
            });
        }
    };
    
    let resultTextMaker = {
    
        // Copied from crawler
    
        generateSummaryResult(sections, res) {
            let date = new Date();
            date.setTime(res.time);
            sections.push({
                title: `U${res.uid} ${res.username}`,
                detail: [
                    `提交总数: ${res.submitTotal}`,
                    `通过总数: ${res.solvedTotal}`,
                    `统计时间: ${date.toLocaleString()}`
                ]
            });
        },
        generateDifficultyResult(sections, solved) {
        
            let names = [], lists = [];
        
            solved.forEach((prob) => {
                let p = names.indexOf(prob.difficulty);
                if (p === -1) {
                    p = names.length;
                    names.push(prob.difficulty);
                    lists.push([]);
                }
                let desc = prob.pid + ' ' + prob.name;
                if (prob.algorithms.length) {
                    desc += ` (${prob.algorithms.join(';')})`;
                }
                lists[p].push(desc);
            });
        
            sections.push({
                title: '难度总览',
                detail: names.map((name, i) => `${name}: ${lists[i].length}`)
            });
        
            names.forEach((name, i) => {
                sections.push({
                    title: '难度: ' + name,
                    detail: lists[i]
                });
            });
        },
        generateAlgorithmResult(sections, solved) {
        
            let names = [], lists = [];
        
            solved.forEach((prob) => {
                let desc = prob.pid + ' ' + prob.name + ` (难度: ${prob.difficulty})`;
                prob.algorithms.forEach((algorithm) => {
                    let p = names.indexOf(algorithm);
                    if (p === -1) {
                        p = names.length;
                        names.push(algorithm);
                        lists.push([]);
                    }
                    lists[p].push(desc);
                });
            });
        
            sections.push({
                title: '算法总览',
                detail: names.map((name, i) => `${name}: ${lists[i].length}`)
            });
        
            names.forEach((name, i) => {
                sections.push({
                    title: '算法标签: ' + name,
                    detail: lists[i]
                });
            });
        },
        generateUnknownResult(sections, arr) {
            if (!arr.length) return;
        
            sections.push({
                title: '未知题目',
                detail: arr
            });
        },
        make(res) {
        
            const SEPARATOR = '--------------------';
            const CRLF = '\r\n';
        
            let sections = [];
        
            this.generateSummaryResult(sections, res);
            this.generateDifficultyResult(sections, res.solved);
            this.generateAlgorithmResult(sections, res.solved);
            this.generateUnknownResult(sections, res.solvedUnknown);
        
            return [].concat(...sections.map((section) => [section.title, SEPARATOR].concat(section.detail).join(CRLF))).join(CRLF + CRLF);
        }
    };
    
    UI.selfInit();
    problemPanel.setSortWays(null, null);
    
    (function(crawlResult) {
        dataManager.init(crawlResult);
        UI.init();
    })(<%- JSON.stringify(crawlResult) %>);

    </script>
</body>
</html>